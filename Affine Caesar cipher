#include <stdio.h>

// Function to calculate modular inverse of a under modulo m using Extended Euclidean Algorithm
int modInverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m, a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0)
        x1 += m0;

    return x1;
}

// Encrypts a single character using the affine Caesar cipher formula
char affineEncryptChar(char p, int a, int b) {
    if (p >= 'a' && p <= 'z') {
        return (char) ((((a * (p - 'a') + b) % 26) + 26) % 26 + 'a');
    } else if (p >= 'A' && p <= 'Z') {
        return (char) ((((a * (p - 'A') + b) % 26) + 26) % 26 + 'A');
    }
    return p;
}

// Decrypts a single character using the affine Caesar cipher formula
char affineDecryptChar(char c, int a, int b) {
    int a_inv = modInverse(a, 26);
    if (c >= 'a' && c <= 'z') {
        return (char) ((((a_inv * ((c - 'a' - b)) % 26) + 26) % 26) + 'a');
    } else if (c >= 'A' && c <= 'Z') {
        return (char) ((((a_inv * ((c - 'A' - b)) % 26) + 26) % 26) + 'A');
    }
    return c;
}

void affineEncrypt(char *plaintext, char *ciphertext, int a, int b) {
    int i = 0;
    while (plaintext[i] != '\0') {
        ciphertext[i] = affineEncryptChar(plaintext[i], a, b);
        i++;
    }
    ciphertext[i] = '\0';
}

void affineDecrypt(char *ciphertext, char *plaintext, int a, int b) {
    int i = 0;
    while (ciphertext[i] != '\0') {
        plaintext[i] = affineDecryptChar(ciphertext[i], a, b);
        i++;
    }
    plaintext[i] = '\0';
}

int main() {
    char plaintext[] = "AffineCipher";
    char ciphertext[100];
    char decryptedtext[100];

    int a = 5; // Multiplicative key (must be coprime with 26)
    int b = 8; // Additive key

    printf("Plaintext: %s\n", plaintext);

    affineEncrypt(plaintext, ciphertext, a, b);
    printf("Ciphertext: %s\n", ciphertext);

