#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26


const double english_frequencies[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153,
    0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056,
    2.758, 0.978, 2.360, 0.150, 1.974, 0.074
};
typedef struct {
    char letter;
    double frequency;
} Frequency;
int compare(const void *a, const void *b) {
    Frequency *freqA = (Frequency *)a;
    Frequency *freqB = (Frequency *)b;
    return (freqB->frequency - freqA->frequency) * 10000;
}


void analyze_frequencies(const char *ciphertext, Frequency *frequencies) {
    int counts[ALPHABET_SIZE] = {0};
    int total_letters = 0;

    
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            counts[ciphertext[i] - 'a']++;
            total_letters++;
        } else if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            counts[ciphertext[i] - 'A']++;
            total_letters++;
        }
    }

    
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        frequencies[i].letter = 'a' + i;
        frequencies[i].frequency = (double)counts[i] / total_letters * 100;
    }

    
    qsort(frequencies, ALPHABET_SIZE, sizeof(Frequency), compare);
}
void generate_plaintext(const char *ciphertext, const char *mapping, char *plaintext) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            plaintext[i] = mapping[ciphertext[i] - 'a'];
        } else if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            plaintext[i] = mapping[ciphertext[i] - 'A'] - ('a' - 'A');
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Main function
int main() {
    char ciphertext[1024];
    Frequency frequencies[ALPHABET_SIZE];
    char mapping[ALPHABET_SIZE];
    char plaintext[1024];
    int top_n;

    // Get user input
    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove trailing newline

    printf("Enter the number of top possible plaintexts to display: ");
    scanf("%d", &top_n);

    // Perform frequency analysis
    analyze_frequencies(ciphertext, frequencies);

    // Generate top possible plaintexts
    for (int i = 0; i < top_n; i++) {
        for (int j = 0; j < ALPHABET_SIZE; j++) {
            mapping[frequencies[j].letter - 'a'] = 'a' + ((int)(english_frequencies[(j + i) % ALPHABET_SIZE] * 10) % ALPHABET_SIZE);
        }
        generate_plaintext(ciphertext, mapping, plaintext);
        printf("Possible plaintext #%d: %s\n", i + 1, plaintext);
    }

    return 0;
}
