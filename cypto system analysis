#include <stdio.h>
#include <math.h>
#include <stdlib.h>

// Function to compute (base^exponent) % modulus using modular exponentiation
unsigned long long mod_exp(unsigned long long base, unsigned long long exponent, unsigned long long modulus) {
    unsigned long long result = 1;
    base = base % modulus;
    while (exponent > 0) {
        if (exponent % 2 == 1) {
            result = (result * base) % modulus;
        }
        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }
    return result;
}

int main() {
    // RSA public key components
    unsigned long long n = 3233; // Example modulus (product of two primes)
    unsigned long long e = 17;   // Example public exponent

    char message[] = "HELLO";    // Message to encrypt
    unsigned long long encrypted_message[5]; // Array to store encrypted message

    printf("Original message: %s\n", message);

    // Encrypt each character
    for (int i = 0; message[i] != '\0'; i++) {
        unsigned long long m = message[i] - 'A'; // Convert character to integer (0-25)
        encrypted_message[i] = mod_exp(m, e, n); // Encrypt using RSA
        printf("Encrypted character %c: %llu\n", message[i], encrypted_message[i]);
    }

    return 0;
}
