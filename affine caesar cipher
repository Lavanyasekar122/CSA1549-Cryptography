#include <stdio.h>
#include <string.h>
#include <stdlib.h>
const char *frequency_order = "ETAOINSHRDLCUMWFGYPBVKJXQZ";


void count_frequency(const char *ciphertext, int *freq) {
    int i;
    for (i = 0; i < 26; i++) freq[i] = 0;

    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            freq[ciphertext[i] - 'A']++;
        } else if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            freq[ciphertext[i] - 'a']++;
        }
    }
}
int compare(const void *a, const void *b) {
    return (*(int *)b - *(int *)a);
}


void map_letters(int *freq, char *map) {
    int i, j;
    int freq_sorted[26];
    char freq_map[26];

    // Sort frequencies
    for (i = 0; i < 26; i++) freq_sorted[i] = freq[i];
    qsort(freq_sorted, 26, sizeof(int), compare);

    // Create mapping based on sorted frequencies
    for (i = 0; i < 26; i++) {
        for (j = 0; j < 26; j++) {
            if (freq[j] == freq_sorted[i]) {
                freq_map[i] = 'A' + j;
                freq[j] = -1; // Mark as used
                break;
            }
        }
    }

    // Map letters to most common English letters
    for (i = 0; i < 26; i++) {
        map[freq_map[i] - 'A'] = frequency_order[i];
    }
}

// Function to decrypt using the frequency map
void decrypt(const char *ciphertext, char *plaintext, const char *map) {
    int i;
    for (i = 0; ciphertext[i] != '\0'; i++) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            plaintext[i] = map[ciphertext[i] - 'A'];
        } else if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            plaintext[i] = map[ciphertext[i] - 'a'] + 32;
        } else {
            plaintext[i] = ciphertext[i]; // Non-alphabetic characters remain unchanged
        }
    }
    plaintext[i] = '\0';
}

int main() {
    char ciphertext[] = "ZPV BSF HPJOH UP MFBSO D QSPHSBNNJOH";
    char plaintext[100];
    int freq[26];
    char map[26];

    count_frequency(ciphertext, freq);
    map_letters(freq, map);
    decrypt(ciphertext, plaintext, map);

    printf("Ciphertext: %s\n", ciphertext);
    printf("Possible Plaintext: %s\n", plaintext);

    return 0;
}
