#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define SHA3_BLOCK_SIZE 1024
#define SHA3_CAPACITY 576
#define LANE_SIZE 64

typedef struct {
    uint64_t state[25];
    unsigned int rate;
    unsigned int capacity;
} sha3_context;

void sha3_init(sha3_context *ctx, unsigned int block_size) {
    memset(ctx, 0, sizeof(sha3_context));
    ctx->rate = block_size;
    ctx->capacity = SHA3_CAPACITY;
}

void sha3_absorb(sha3_context *ctx, const uint8_t *input, size_t length) {
    size_t block_size = ctx->rate / 8;
    for (size_t i = 0; i < length; i++) {
        size_t lane_index = (i % block_size) / LANE_SIZE;
        size_t lane_offset = (i % block_size) % LANE_SIZE;
        ctx->state[lane_index] ^= (uint64_t)input[i] << (lane_offset * 8);
    }
}

int check_nonzero_lanes(sha3_context *ctx) {
    for (unsigned int i = SHA3_CAPACITY / LANE_SIZE; i < 25; i++) {
        if (ctx->state[i] == 0) {
            return 0;
        }
    }
    return 1;
}

int main() {
    sha3_context ctx;
    sha3_init(&ctx, SHA3_BLOCK_SIZE);

    uint8_t P0[SHA3_BLOCK_SIZE / 8];
    memset(P0, 0xAA, sizeof(P0)); // Initial message block with at least one nonzero bit in each lane

    printf("Initial state setup...\n");
    sha3_absorb(&ctx, P0, sizeof(P0));

    int iterations = 0;
    while (!check_nonzero_lanes(&ctx)) {
        sha3_absorb(&ctx, P0, sizeof(P0));
        iterations++;
    }

    printf("All lanes have at least one nonzero bit after %d iterations\n", iterations);
    return 0;
}
