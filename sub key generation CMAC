#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define BLOCK_SIZE 16 // For 128-bit block size
#define MSB_MASK 0x80 // Most Significant Bit mask for 128 bits

void print_block(uint8_t *block) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        printf("%02X ", block[i]);
    }
    printf("\n");
}

void left_shift(uint8_t *input, uint8_t *output) {
    uint8_t overflow = 0;
    for (int i = BLOCK_SIZE - 1; i >= 0; i--) {
        output[i] = (input[i] << 1) | overflow;
        overflow = (input[i] & MSB_MASK) ? 1 : 0;
    }
}

void xor_with_constant(uint8_t *block, uint8_t constant) {
    block[BLOCK_SIZE - 1] ^= constant;
}

void generate_subkeys(uint8_t *key, uint8_t *subkey1, uint8_t *subkey2) {
    uint8_t L[BLOCK_SIZE] = {0};
    // Block cipher with key applied to 0 block (Here assumed to be same as key for simplicity)
    memcpy(L, key, BLOCK_SIZE);
    
    print_block(L);

    // Generate subkey 1
    left_shift(L, subkey1);
    if (L[0] & MSB_MASK) {
        xor_with_constant(subkey1, 0x87); // Constant for 128-bit block size
    }

    // Generate subkey 2
    left_shift(subkey1, subkey2);
    if (subkey1[0] & MSB_MASK) {
        xor_with_constant(subkey2, 0x87);
    }
}

int main() {
    uint8_t key[BLOCK_SIZE] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
    uint8_t subkey1[BLOCK_SIZE];
    uint8_t subkey2[BLOCK_SIZE];

    generate_subkeys(key, subkey1, subkey2);

    printf("Subkey 1: ");
    print_block(subkey1);
    printf("Subkey 2: ");
    print_block(subkey2);

    return 0;
}
