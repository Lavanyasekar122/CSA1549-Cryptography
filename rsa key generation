#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to generate random prime numbers (placeholder)
int generate_prime() {
    int primes[] = {101, 103, 107, 109, 113, 127, 131, 137, 139, 149};
    return primes[rand() % 10];
}

// Function to calculate gcd
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

// Extended Euclidean Algorithm
int modInverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m;
        a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0)
        x1 += m0;

    return x1;
}

int main() {
    srand(time(0));
    
    int p = generate_prime();
    int q = generate_prime();
    while (q == p) {
        q = generate_prime();
    }

    int n = p * q;
    int phi = (p - 1) * (q - 1);

    int e = 3;
    while (gcd(e, phi) != 1) {
        e += 2;
    }

    int d = modInverse(e, phi);

    printf("New Public Key (e, n): (%d, %d)\n", e, n);
    printf("New Private Key (d): %d\n", d);

    return 0;
}
